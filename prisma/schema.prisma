// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "windows"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Entry {
  id      String @id @default(cuid())
  content String @db.Text

  fileUrl String? @db.Text

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// next auth tables

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  ext_expires_in           Int?
  refresh_token_expires_in Int?
  not_before               Int?
  id_token_expires_in      Int?
  profile_info             String? @db.Text
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  DISABLED
  USER
  ADMIN
}

model User {
  id                    String             @id @default(cuid())
  name                  String?
  email                 String?            @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role               @default(DISABLED)
  accounts              Account[]
  sessions              Session[]
  enabled               Boolean            @default(true)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// module tables

model Url {
  id String @id @default(cuid())
  url String @db.Text
  name String? @db.Text
  description String? @db.Text
  parentId String? @db.Text
  source Boolean @default(false)
  listPage Boolean @default(false)
  contentPage Boolean @default(false)
  listExpression String? @db.Text
  contentExpression String? @db.Text
  configurationId String?
  configuration Configuration? @relation(fields: [configurationId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  children Url[] @relation("UrlToUrl")
  parent   Url?  @relation("UrlToUrl", fields: [parentId], references: [id])
  queue Queue[]
  
}

model Configuration {
  id String @id @default(cuid())
  name String @db.Text
  description String? @db.Text
  prompt String? @db.Text
  sitePrompt String? @db.Text
  listPrompt String? @db.Text
  contentPrompt String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  fields ConfigurationFieldJoin[]

  urls Url[]
}

model ConfigurationFieldJoin {
  id String @id @default(cuid())
  parentId String
  childId String
  parent Configuration @relation(fields: [parentId], references: [id])
  child Field @relation(fields: [childId], references: [id])
}

model Field {
  id String @id @default(cuid())
  name String @db.Text
  type String @db.Text @default("text")
  description String? @db.Text
  prompt String? @db.Text
  weight Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  configurations ConfigurationFieldJoin[]
}


enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Queue {
  id String @id @default(cuid())
  urlId String @unique
  url Url @relation(fields: [urlId], references: [id])
  status QueueStatus
  actAfter DateTime
  retries Int @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
